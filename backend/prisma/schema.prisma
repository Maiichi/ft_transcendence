// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
     id                  Int                      @id @default(autoincrement())
     intraId             Int                      @unique 
     email               String                   @unique
     firstName           String                   @db.VarChar(255)
     lastName            String                   @db.VarChar(255)    
     userName            String                   @unique @db.VarChar(255) 
     avatar_url          String?                  @db.VarChar(255)
     status              String                   @default("OFFLINE")
     twoFactorActivate   Boolean?                 @default(false)
     twoFactorSecret     String?                  @db.VarChar(255)  
     memberships         Membership[]
     conversations       Conversation[]                
     createdAt           DateTime                 @default(now()) @db.Timestamp(6)
     updatedAt           DateTime?                @updatedAt @db.Timestamp(6)
     Messages            Message[]

     @@map("users")
}

model Conversation {
     id                  Int                      @id @default(autoincrement())
     type                String // Either "direct" for direct messages, "channel" for public channels, or "private_channel" for private channels
     participants        User[]                   
     room                Room?                    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
     roomId              Int?                     @unique
     messages            Message[]
     createdAt           DateTime                 @default(now()) @db.Timestamp(6)
     updatedAt           DateTime?                @updatedAt @db.Timestamp(6)

}

model Message {
     id                  Int                      @id @default(autoincrement())
     content             String
     createdAt           DateTime                 @default(now()) @db.Timestamp(6)
     sender              User                     @relation(fields: [senderId], references: [intraId], onDelete: Cascade, onUpdate: Cascade)
     senderId            Int
     chat                Conversation             @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
     chatId              Int
}

model Room {
     id                  Int                      @id @default(autoincrement())
     name                String                   @db.VarChar()
     type                String
     members             Membership[]             @relation("membership")
     conversation        Conversation?             
     password            String                   @db.VarChar()
     createdAt           DateTime                 @default(now()) @db.Timestamp(6)
     updatedAt           DateTime?                @updatedAt @db.Timestamp(6)
}

model Membership {
     id                  Int                      @id @default(autoincrement())
     isOwner             Boolean                  @default(false)
     isAdmin             Boolean                  @default(false)
     isBanned            Boolean                  @default(false)
     isMute              Boolean                  @default(false)
     timeMute            DateTime                 @default(now())
     room                Room                     @relation("membership", fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
     roomId              Int
     user                User                     @relation(fields: [userId], references: [intraId], onDelete: Cascade, onUpdate: Cascade)
     userId              Int
}